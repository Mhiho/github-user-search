{"version":3,"sources":["components/SearchResult.tsx","components/SearchBar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SearchResult","props","reps","result","user","repos","loading","sortedRepos","sort","a","b","stargazers_count","slice","Fragment","avatar_url","className","alt","src","login","bio","map","repo","index","href","html_url","name","SearchBar","useState","term","setTerm","userResults","setUserResults","setRepos","setUser","setLoading","onSubmitHandler","e","preventDefault","root_url","fetch","response","json","data","items","responseBio","dataBio","responseRepos","dataRepos","onSubmit","placeholder","type","value","onChange","target","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a710c0c.chunk.js","sourcesContent":["import React from 'react';\nimport '../style/main.css';\n\ninterface IProps {\n    result?: any;\n    user: any;\n    repos?: any;\n    loading: boolean;\n}\nconst SearchResult: React.FC<IProps> = (props: IProps) => {\n    const { result, user, repos, loading } = props;\n\n    const findBestRepos = (reps: any) => {\n        reps.sort((a: any, b: any) => a.stargazers_count < b.stargazers_count ? 1 : a.stargazers_count > b.stargazers_count ? -1 : 0);\n        // Poniżej wystarczy zmienić drugi argument funcji slice, żeby zwiększyć ilość wyświetlanych repozytoriów\n        return reps.slice(0, 3);\n    }\n    const sortedRepos = findBestRepos(repos)\n    return (\n        <React.Fragment>\n            {\n                !loading ?\n                    result ?\n                        <>\n                            {\n                                result.avatar_url &&\n                                <div className=\"photo-login\">\n                                    <img alt=\"userIcon\" src={result.avatar_url} />\n                                    <h4>{result.login}</h4>\n                                </div>\n                            }\n                            <div className=\"bio\">\n                                {user && user.bio ?\n                                    <p>{user.bio}</p>\n                                    : <p>User doesn't have own description. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed.</p>\n                                }\n                            </div>\n                            <div className=\"bio subtitle\">\n                                <h4>Top repositories:</h4>\n                            </div>\n                            <div className=\"repo-buttons\">\n                                {sortedRepos ? sortedRepos.map((repo: any, index: number): any => (\n                                    <div className=\"repo-button\" key={`repos-index-${index}`}><a href={repo.html_url}>{repo.name}</a></div>\n                                )\n                                ) : 'No repo for this user'}\n                            </div>\n                        </> : 'There is no such a user' : null\n            }\n        </React.Fragment>\n    )\n}\nexport default SearchResult;","import React, { useState } from 'react';\nimport SearchResult from './SearchResult';\nimport '../style/main.css';\n\ninterface IState {\n    term?: string;\n    userResults?: any;\n    user?: {};\n    repos?: [];\n    loading?: boolean;\n}\nconst SearchBar: React.FC<IState> = () => {\n    const [term, setTerm] = useState('');\n    const [userResults, setUserResults] = useState({});\n    const [repos, setRepos] = useState([]);\n    const [user, setUser] = useState({});\n    const [loading, setLoading] = useState(true);\n\n    const onSubmitHandler = async (e: any) => {\n        e.preventDefault();\n        if (!term) {\n            return;\n        }\n        const root_url = 'https://api.github.com';\n        const response: any = await fetch(`${root_url}/search/users?q=${term}&per_page=1`);\n        const data: any = await response.json();\n        setUserResults(data.items[0]);\n        const responseBio: any = await fetch(`${root_url}/users/${term}`);\n        const dataBio: any = await responseBio.json();\n        setUser(dataBio);\n        const responseRepos: any = await fetch(`${root_url}/users/${term}/repos`);\n        const dataRepos: any = await responseRepos.json();\n        setRepos(dataRepos);\n        setLoading(false);\n    }\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <form onSubmit={onSubmitHandler}>\n                    <div className=\"searchbar-input\">\n                        <input\n                            placeholder=\"&#xF002;  Search for users\"\n                            type=\"search\"\n                            value={term}\n                            onChange={e => setTerm(e.target.value)}\n                        />\n                        <input type=\"submit\"\n                            value=\"Search\"\n                        />\n                    </div>\n                </form>\n            </div>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <SearchResult result={userResults} repos={repos} user={user} loading={loading} />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default SearchBar;","import React from 'react';\nimport './App.css';\nimport SearchBar from './components/SearchBar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SearchBar />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}